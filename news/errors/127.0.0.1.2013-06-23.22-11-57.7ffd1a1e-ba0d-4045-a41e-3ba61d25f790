(dp1
S'output'
p2
S"<class 'cx_Oracle.DatabaseError'> ORA-01704: string literal too long\n"
p3
sS'layer'
p4
S'D:\\work\\web2py_src\\web2py\\applications\\news\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    count = db.news.id.count()\n    categories = db().select(db.category.ALL,count,\n                           left=db.news.on(db.news.id_category==db.category.id),\n                           groupby=(db.category.id,db.category.title),\n                           orderby=db.category.title)\n    \n    news={}\n    for row in categories:\n        rows = None\n        if row[count] > 3:\n            rows = db(db.news.id_category==row.category.id).select(db.news.ALL, orderby=\'<random>\', limitby=(0,3))\n        else:\n            rows = db(db.news.id_category==row.category.id).select(db.news.ALL, orderby=db.news.newsdate)\n        \n        news.update({row.category.id: rows})\n            \n    return dict(news=news, categories=categories,count=count)\n\n@auth.requires_login()\ndef add():\n    form = SQLFORM(db.news)\n    if form.process().accepted:\n        response.flash = \'\xd0\x9d\xd0\xbe\xd0\xb2\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb0\'\n    elif form.errors:\n       response.flash = \'\xd0\x9e\xd1\x88\xd0\xb8\xd0\xb1\xd0\xba\xd0\xb8\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef edit():\n    record = db.news(request.args(0)) or redirect(URL(\'index\'))\n    form = SQLFORM(db.news, record, \n                   deletable = True,\n                   upload=URL(\'download\'))\n    if form.process().accepted:\n        response.flash = \'\xd0\x9d\xd0\xbe\xd0\xb2\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd1\x81\xd0\xbe\xd1\x85\xd1\x80\xd0\xb0\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb0\'\n    elif form.errors:\n       response.flash = \'\xd0\x9e\xd1\x88\xd0\xb8\xd0\xb1\xd0\xba\xd0\xb8\'\n    return dict(form=form)\n\n@auth.requires_login()    \ndef category_add():\n    form = SQLFORM(db.category)\n    if form.process().accepted:\n        response.flash = \'\xd0\x9a\xd0\xb0\xd1\x82\xd0\xb5\xd0\xb3\xd0\xbe\xd1\x80\xd0\xb8\xd1\x8f \xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb0\'\n    elif form.errors:\n       response.flash = \'\xd0\x9e\xd1\x88\xd0\xb8\xd0\xb1\xd0\xba\xd0\xb8\'\n    return dict(form=form)\n\n@auth.requires_login()    \ndef category_edit():\n    record = db.category(request.args(0)) or redirect(URL(\'index\'))\n    form = SQLFORM(db.category, record, \n                   deletable = True)\n    if form.process().accepted:\n        response.flash = \'\xd0\x9a\xd0\xb0\xd1\x82\xd0\xb5\xd0\xb3\xd0\xbe\xd1\x80\xd0\xb8\xd1\x8f \xd1\x81\xd0\xbe\xd1\x85\xd1\x80\xd0\xb0\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb0\'\n    elif form.errors:\n       response.flash = \'\xd0\x9e\xd1\x88\xd0\xb8\xd0\xb1\xd0\xba\xd0\xb8\'\n    return dict(form=form)    \n    \ndef download():\n    return response.download(request, db)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in \n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(edit)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "D:\\work\\web2py_src\\web2py\\gluon\\restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "D:\\work\\web2py_src\\web2py\\applications\\news\\controllers/default.py", line 136, in <module>\n  File "D:\\work\\web2py_src\\web2py\\gluon\\globals.py", line 194, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\work\\web2py_src\\web2py\\gluon\\tools.py", line 3022, in f\n    return action(*a, **b)\n  File "D:\\work\\web2py_src\\web2py\\applications\\news\\controllers/default.py", line 54, in edit\n    if form.process().accepted:\n  File "D:\\work\\web2py_src\\web2py\\gluon\\html.py", line 2188, in process\n    self.validate(**kwargs)\n  File "D:\\work\\web2py_src\\web2py\\gluon\\html.py", line 2127, in validate\n    if self.accepts(**kwargs):\n  File "D:\\work\\web2py_src\\web2py\\gluon\\sqlhtml.py", line 1569, in accepts\n    self.id_field_name]).update(**fields)\n  File "D:\\work\\web2py_src\\web2py\\gluon\\dal.py", line 9982, in update\n  File "D:\\work\\web2py_src\\web2py\\gluon\\dal.py", line 1452, in update\n    sql_o += \' ORDER BY %s\' % \', \'.join([\'%s.%s\'%(t,x) for t in tablenames for x in (hasattr(self.db[t],\'_primarykey\') and self.db[t]._primarykey or [self.db[t]._id.name])])\nDatabaseError: ORA-01704: string literal too long\n\n'
p11
s.